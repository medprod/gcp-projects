# -*- coding: utf-8 -*-
"""Pilot_Analysis_Emp_Churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ItC4ZJ_rnfah2OAxqoDWFvKQO8QZRacg

# Connect to BigQuery
"""

#libraries we need
from google.cloud import bigquery
from google.colab import auth #authenticates when we use bigquery

#authenticate
auth.authenticate_user()

#initialize the client from BigQuery
project_id = 'pr1-employee-retention-program' #click on your project in gcp and paste ID
client = bigquery.Client(project=project_id, location='US')

#get the dataset employee_data
dataset_ref = client.dataset('employee_data', project=project_id)
dataset = client.get_dataset(dataset_ref)

#get the tables hr_data and new_employees from employee_data dataset
hr_table_ref = dataset.table('hr_data')
hr_table = client.get_table(hr_table_ref)
hr_table.schema

emp_table_ref = dataset.table('new_employees')
emp_table = client.get_table(emp_table_ref)
emp_table.schema

#convert the tables to dataframe
hr_df = client.list_rows(table=hr_table).to_dataframe()
hr_df.head()

emp_df = client.list_rows(table=emp_table).to_dataframe()
emp_df.head()

"""# Build Model

### Intall Pycaret
"""

!pip install pycaret

"""## Code and Train Model"""

from pycaret.classification import *

hr_df.head()

#preprocesses our data and prepares it for model training
#target -- the target variable is what the model will try to predict

setup(hr_df, target='Quit_the_Company',
      session_id = 123,
      ignore_features=['employee_id'],
      categorical_features=['salary', 'Departments'])

compare_models()

"""## Create Model - Random Forest Classifier"""

#This line of code is telling PyCaret: "Please create a Random Forest model for me and store it in a variable called rf_model". This model will then be trained using the data that was previously prepared and setup using the setup() function.
rf_model = create_model('rf')

#give me a final dataframe with predictions
final_df = predict_model(rf_model)

final_df.head()

"""#### Now we use this predicted model and apply it to new_employees data"""

emp_predictions = predict_model(rf_model, data=emp_df)

emp_predictions.head()

#write back the employee predictions model to big query (to_gbq_)
emp_predictions.to_gbq('employee_data.pilot_predictions', project_id,
                       chunksize=None,
                       if_exists='replace')

"""### Most Influential Features"""

plot_model(rf_model, plot='feature')

#create a feature table
rf_model.feature_names_in_

rf_model.feature_importances_

import pandas as pd

feature_table = pd.DataFrame(zip(rf_model.feature_names_in_, rf_model.feature_importances_),
                             columns=['feature', 'importance'])

feature_table

feature_table.to_gbq('employee_data.features_table',
                     project_id, chunksize=None,
                     if_exists = 'replace')

